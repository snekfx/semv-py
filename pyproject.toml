[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semvx"
version = "1.3.0"
description = "Semantic Version Manager - Python rewrite with modular architecture"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "AGPL-3.0"}
authors = [
    {name = "SEMV Development Team", email = "dev@semv.tools"},
]
keywords = ["semver", "versioning", "git", "automation", "build-tools"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Version Control :: Git",
]
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "mypy>=1.0",
    "ruff>=0.0.270",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.0",
]

[project.urls]
Homepage = "https://github.com/semv-tools/semv-py"
Repository = "https://github.com/semv-tools/semv-py.git"
Issues = "https://github.com/semv-tools/semv-py/issues"
Documentation = "https://docs.semv.tools"

[project.scripts]
semvx = "semvx.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
semvx = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.9"
packages = ["semvx"]
mypy_path = "src"
# Relaxed type checking for CLI tool - focus on critical errors
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = false

# Ignore specific modules that would require extensive type annotations
[[tool.mypy.overrides]]
module = "semvx.cli.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "semvx.detection.detector"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=semvx",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=40",
    "-v"
]

[tool.ruff]
line-length = 100
target-version = "py38"
src = ["src"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B904",  # raise from - not critical for this project
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B011", "B018"]
"src/semvx/cli/main.py" = ["F821"]  # Functions defined later in file

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]